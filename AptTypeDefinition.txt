Vector2 =
    Float32: X,
    Float32: Y;

Transform =
    Float32: m00,
    Float32: m01,
    Float32: m10,
    Float32: m11;

Rect =
    Float32: left,
    Float32: top,	
    Float32: right,
    Float32: bottom;

Character =
    Unsigned32: type,
    Unsigned32: signature,
$Derive:
    type  1 > Shape /
    type  2 > EditText /
    type  3 > Font /
    type  4 > Button /
    type  5 > Sprite /
    type  6 > Image /
    type  8 > Morph /
    type  9 > Movie /
    type 10 > Text;

FrameItem =
    Unsigned32: type,
$Derive:
    type 1 > Action /
    type 2 > FrameLabel /
    type 3 > PlaceObject /
    type 4 > RemoveObject /
    type 5 > BackgroundColor /
    type 8 > InitAction;

Frame =
    Unsigned32: frameitemcount,
    std::vector<FrameItem*> frameitems;

OutputFrame =
    Unsigned32: frameitemcount,
    Pointer > Pointer > FrameItem: frameItems;

Shape =
    $Base: Character,
    Rect: bounds,
    Unsigned32: geometry;

Tri =
    Vector2: v1,
    Vector2: v2,
    Vector2: v3;

Line =
    Vector2: v1,
    Vector2: v2;

SolidStyle =
    Unsigned32: red,
    Unsigned32: green,
    Unsigned32: blue,
    Unsigned32: alpha;

LineStyle =
    Unsigned32: width,
    Unsigned32: red,
    Unsigned32: green,
    Unsigned32: blue,
    Unsigned32: alpha;

TextureStyle =
    Unsigned32: red,
    Unsigned32: green,
    Unsigned32: blue,
    Unsigned32: alpha,
    Unsigned32: TextureCharacter,
    Transform: rotateandscale,
    Vector2: translate;

GeometryEntry =
    Unsigned32: tricount,
    std::vector<Tri *> tris,
    Unsigned32: linecount,
    std::vector <Line *> lines,
    Unsigned32: solidstylecount,
    std::vector <SolidStyle *> solidstyles,
    Unsigned32: linestylecount,
    std::vector <LineStyle *> linestyles,
    Unsigned32: texturestylecount,
    std::vector <TextureStyle *> texturestyles;

Geometry =
    Unsigned32: entrycount,
    std::vector<GeometryEntry *> entries;

ParsedShape =
    $Base: Character,
    Rect: bounds,
    Pointer > Geometry: geometry;

EditText =
    $Base: Character,
    Rect: bounds,
    Unsigned32: font,
    Unsigned32: alignment,
    Unsigned32: color,
    Float32: fontheight,
    Unsigned32: readonly,
    Unsigned32: multiline,
    Unsigned32: wordwrap,
    Pointer > String: text,
    Pointer > String: variable;

Font =
    $Base: Character,
    Pointer > String: name,
    Unsigned32: glyphcount,
    std::vector<Unsigned32:> glyphs;

OutputFont =
    $Base: Character,
    Pointer > String: name,
    Unsigned32: glyphcount,
    Unsigned32: *glyphs, //offset of glyph data
};

ButtonRecord =
    Unsigned32: flags, //matches with ButtonFlags
    Unsigned32: character,
    Integer32 depth,
    Transform: rotateandscale,
    Vector2: translate,
    Rect: color, ///always 1.0,1.0,1.0,1.0 as far as I can see
    Rect: unknown, ///always zero as far as I can see
};

Triangle =
    unsigned short v1,
    unsigned short v2,
    unsigned short v3;


Action =
    $Base: FrameItem,
    ActionHelper::ActionBytes ab;

OutputAction =
    $Base: FrameItem,
    uint8_t *actionbytes;

ButtonAction =
    Unsigned32: flags, //matches with ButtonActionFlags,
    Action *actiondata;

OutputButtonAction =
    Unsigned32: flags, //matches with ButtonActionFlags,
    uint8_t *actiondata;

Button =
    $Base: Character,
    Unsigned32: unknown, ///always zero as far as I can see
    Rect: bounds,
    Unsigned32: trianglecount,
    Unsigned32: vertexcount,
    std::vector <Vector2: *> vertexes,
    std::vector <Triangle *> triangles,
    Unsigned32: recordcount,
    std::vector <ButtonRecord *> buttonrecords,
    Unsigned32: buttonactioncount,
    std::vector <ButtonAction *> buttonactionrecords,
    Unsigned32: unknown2, ///always zero as far as I can see
};

OutputButton =
    $Base: Character,
    Unsigned32: unknown, //always zero as far as I can see
    Rect: bounds,
    Unsigned32: trianglecount,
    Unsigned32: vertexcount,
    Vector2: *vertexes,
    Triangle *triangles,
    Unsigned32: recordcount,
    ButtonRecord *buttonrecords,
    Unsigned32: buttonactioncount,
    OutputButtonAction *buttonactionrecords,
    Unsigned32: unknown2, //always zero as far as I can see
};

Sprite =
    $Base: Character,
    Unsigned32: framecount,
    std::vector<Frame *> frames,
    Unsigned32: pointer, //always zero, used at runtime
};

OutputSprite =
    $Base: Character,
    Unsigned32: framecount,
    OutputFrame *frames, //offset of frame data
    Unsigned32: pointer, //always zero, used at runtime
};

Image =
    $Base: Character,
    Unsigned32: texture;

Texture =
    Unsigned32: texture,
    bool hasuv,
    Unsigned32: top,
    Unsigned32: left,
    Unsigned32: bottom,
    Unsigned32: right;

D3DImage =
    $Base: Character,
    Texture *texture;

Morph =
    $Base: Character,
    Unsigned32: startshape,
    Unsigned32: endshape;

Import =
    Pointer > String: movie,
    Pointer > String: name,
    Unsigned32: character,
    Unsigned32: pointer, //always zero, used at runtime
};

Export =
    Pointer > String: name,
    Unsigned32: character;

Movie =
    $Base: Character,
    Unsigned32: framecount,
    std::vector<Frame *> frames,
    Unsigned32: pointer, //always zero, used at runtime
    Unsigned32: charactercount,
    std::vector<Character *> characters,
    Unsigned32: screensizex,
    Unsigned32: screensizey,
    Unsigned32: unknown, ///always 33 as far as I can see
    Unsigned32: importcount,
    std::vector<Import *> imports,
    Unsigned32: exportcount,
    std::vector<Export *> exports,
    Unsigned32: count, //always zero, used at runtime
};

OutputMovie =
    $Base: Character,
    Unsigned32: framecount,
    OutputFrame *frames, //offset of frame data
    Unsigned32: pointer, //always zero, used at runtime
    Unsigned32: charactercount,
    Character **characters, //offset of character data
    Unsigned32: screensizex,
    Unsigned32: screensizey,
    Unsigned32: unknown, //always 33 as far as I can see
    Unsigned32: importcount,
    Import *imports, //offset of imports data
    Unsigned32: exportcount,
    Export *exports, //offset of exports data
    Unsigned32: count, //always zero, used at runtime
};

Glyph =
    Unsigned32: index,
    int advance;

TextRecord =
    Unsigned32: font,
    Rect: color,
    Rect: unknown, ///always zero as far as I can see
    Vector2: offset,
    Float32: textheight,
    Unsigned32: glyphcount,
    std::vector<Glyph *> glyphs;

OutputTextRecord =
    Unsigned32: font,
    Rect: color,
    Rect: unknown, //always zero as far as I can see
    Vector2: offset,
    Float32: textheight,
    Unsigned32: glyphcount,
    Glyph *glyphs;

Text =
    $Base: Character,
    Rect: bounds,
    Transform: rotateandscale,
    Vector2: translate,
    Unsigned32: recordcount,
    std::vector<TextRecord *> records;

OutputText =
    $Base: Character,
    Rect: bounds,
    Transform: rotateandscale,
    Vector2: translate,
    Unsigned32: recordcount,
    OutputTextRecord *records;

FrameLabel =
    $Base: FrameItem,
    Pointer > String: label,
    Unsigned32: flags, ///always 0x70000 as far as I can see
    Unsigned32: frame;

PlaceObjectAction =
    Unsigned32: flags,
    Unsigned32: flags2,
    Action *actiondata;

OutputPlaceObjectAction =
    Unsigned32: flags,
    Unsigned32: flags2,
    uint8_t *actiondata;

PlaceObjectActions =
    Unsigned32: clipactioncount,
    std::vector<PlaceObjectAction *> actions;

OutputPlaceObjectActions =
    Unsigned32: clipactioncount,
    OutputPlaceObjectAction *actions;

PlaceObject =
    $Base: FrameItem,
    Unsigned32: flags, //matches with PlaceObjectFlags
    Integer32 depth,
    Integer32 character,
    Transform: rotateandscale,
    Vector2: translate,
    Unsigned32: colortransform,
    Unsigned32: unknown, ///always zero as far as I can see
    Float32: ratio,
    Pointer > String: name,
    Integer32 clipdepth,
    PlaceObjectActions *poa;

OutputPlaceObject =
    $Base: FrameItem,
    Unsigned32: flags, //matches with PlaceObjectFlags
    Integer32 depth,
    Integer32 character,
    Transform: rotateandscale,
    Vector2: translate,
    Unsigned32: colortransform,
    Unsigned32: unknown, ///always zero as far as I can see
    Float32: ratio,
    Pointer > String: name,
    Integer32 clipdepth,
    OutputPlaceObjectActions *poa;

RemoveObject =
    $Base: FrameItem,
    Integer32 depth;

BackgroundColor =
    $Base: FrameItem,
    Unsigned32: color;

InitAction =
    $Base: FrameItem,
    Unsigned32: sprite,
    ActionHelper>>ActionBytes: ab;

OutputInitAction =
    $Base: FrameItem,
    Unsigned32: sprite,
    uint8_t *actionbytes;